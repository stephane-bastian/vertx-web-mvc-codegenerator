package com.thesoftwarefactory.vertx.web.mvc.generator;

import com.google.common.base.Objects;
import com.thesoftwarefactory.vertx.web.mvc.codegenDsl.Model;
import com.thesoftwarefactory.vertx.web.mvc.codegenDsl.Route;
import com.thesoftwarefactory.vertx.web.mvc.codegenDsl.RouteHandler;
import com.thesoftwarefactory.vertx.web.mvc.codegenDsl.RoutePermission;
import com.thesoftwarefactory.vertx.web.mvc.codegenDsl.RouteRole;
import com.thesoftwarefactory.vertx.web.mvc.codegenDsl.RouteVerb;
import com.thesoftwarefactory.vertx.web.mvc.generator.RoutingHelper;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class GenerateRegisterRoutes {
  public void generate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    final Model model = ((Model) _head);
    URI _uRI = resource.getURI();
    final URI uriWithoutExtension = _uRI.trimFileExtension();
    int _segmentCount = uriWithoutExtension.segmentCount();
    int _minus = (_segmentCount - 1);
    String _segment = uriWithoutExtension.segment(_minus);
    String _firstUpper = RoutingHelper.toFirstUpper(_segment);
    String _plus = ("routes." + _firstUpper);
    final String className = (_plus + "Routes");
    final String filename = RoutingHelper.toJavaFilename(className);
    CharSequence _javaCode = this.toJavaCode(model, className);
    fsa.generateFile(filename, _javaCode);
  }
  
  private CharSequence toJavaCode(final Model model, final String className) {
    CharSequence _xblockexpression = null;
    {
      final String packageName = RoutingHelper.getUpToLastSegment(className);
      final String simpleClassName = RoutingHelper.getLastSegment(className);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package ");
      _builder.append(packageName, "");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("import java.util.function.Function;");
      _builder.newLine();
      _builder.append("import java.util.Objects;");
      _builder.newLine();
      _builder.append("import java.util.ArrayList;");
      _builder.newLine();
      _builder.append("import java.util.Collections;");
      _builder.newLine();
      _builder.append("import java.util.LinkedHashMap;");
      _builder.newLine();
      _builder.append("import java.util.List;");
      _builder.newLine();
      _builder.append("import java.util.Map;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import io.vertx.ext.web.handler.AuthHandler;");
      _builder.newLine();
      _builder.append("import io.vertx.core.Handler;");
      _builder.newLine();
      _builder.append("import io.vertx.ext.web.Router;");
      _builder.newLine();
      _builder.append("import io.vertx.ext.web.RoutingContext;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class ");
      _builder.append(simpleClassName, "");
      _builder.append(" {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("private final static ");
      _builder.append(simpleClassName, "\t");
      _builder.append(" instance = new ");
      _builder.append(simpleClassName, "\t");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("public final static String PROPERTY_METHOD = \"method\";");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public final static String PROPERTY_PATH = \"path\";");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public final static String PROPERTY_HANDLER = \"handler\";");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public final static String PROPERTY_PERMISSION = \"permission\";");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public final static String PROPERTY_ROLE = \"role\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private List<Map<String, Object>> _routes;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("// private constructor");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private ");
      _builder.append(simpleClassName, "\t");
      _builder.append("() {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("// lets use a LinkedHashMap to preserve insertion order");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("_routes = new ArrayList<>();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Map<String, Object> route;");
      _builder.newLine();
      {
        EList<Route> _routes = model.getRoutes();
        for(final Route route : _routes) {
          _builder.append("\t\t");
          CharSequence _addRoute = this.addRoute(route);
          _builder.append(_addRoute, "\t\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t\t");
      _builder.append("// make the list read-only");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("_routes = Collections.unmodifiableList(_routes);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@SuppressWarnings(\"unchecked\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public ");
      _builder.append(simpleClassName, "\t");
      _builder.append(" registerHandlers(Router router) {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("Objects.requireNonNull(router);");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for (Map<String, Object> route: _routes) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("router.get((String) route.get(PROPERTY_PATH)).handler((Handler<RoutingContext>) route.get(PROPERTY_HANDLER));");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return this;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public final ");
      _builder.append(simpleClassName, "\t");
      _builder.append(" registerAuthorisationHandlers(Router router, Function<String, AuthHandler> authHandlerCreator) {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("Objects.requireNonNull(router);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Objects.requireNonNull(authHandlerCreator);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for (Map<String, Object> route: _routes) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("String permission = (String) route.get(PROPERTY_PERMISSION);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if (permission!=null) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("router.get((String) route.get(PROPERTY_PATH)).handler(authHandlerCreator.apply(permission)); ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("String role = (String) route.get(PROPERTY_ROLE);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if (role!=null) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("router.get((String) route.get(PROPERTY_PATH)).handler(authHandlerCreator.apply(\"role:\" + role)); ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return this;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public List<Map<String, Object>> routes() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return _routes;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public final static ");
      _builder.append(simpleClassName, "\t");
      _builder.append(" instance() {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("return instance;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  private CharSequence addRoute(final Route route) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// ");
    RouteVerb _verb = route.getVerb();
    _builder.append(_verb, "");
    _builder.append(" \t\t");
    String _trimPath = RoutingHelper.getTrimPath(route);
    _builder.append(_trimPath, "");
    _builder.newLineIfNotEmpty();
    _builder.append("route = new LinkedHashMap<>();");
    _builder.newLine();
    _builder.append("route.put(PROPERTY_METHOD, \"");
    RouteVerb _verb_1 = route.getVerb();
    _builder.append(_verb_1, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("route.put(PROPERTY_PATH, \"");
    String _trimPath_1 = RoutingHelper.getTrimPath(route);
    _builder.append(_trimPath_1, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("route.put(PROPERTY_HANDLER, routes.");
    RouteHandler _handler = route.getHandler();
    String _className = RoutingHelper.getClassName(_handler);
    _builder.append(_className, "");
    _builder.append(".");
    String _actionHandlerMethodName = RoutingHelper.getActionHandlerMethodName(route);
    _builder.append(_actionHandlerMethodName, "");
    _builder.append("());");
    _builder.newLineIfNotEmpty();
    {
      RoutePermission _permission = route.getPermission();
      boolean _notEquals = (!Objects.equal(_permission, null));
      if (_notEquals) {
        _builder.append("route.put(PROPERTY_PERMISSION, \"");
        RoutePermission _permission_1 = route.getPermission();
        String _value = _permission_1.getValue();
        _builder.append(_value, "");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      RouteRole _role = route.getRole();
      boolean _notEquals_1 = (!Objects.equal(_role, null));
      if (_notEquals_1) {
        _builder.append("route.put(PROPERTY_ROLE, \"");
        RouteRole _role_1 = route.getRole();
        String _value_1 = _role_1.getValue();
        _builder.append(_value_1, "");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("_routes.add(route);");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
